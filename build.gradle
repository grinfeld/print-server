buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:$gradleShadowPlugin"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyPlugin"
    }
}

plugins {
    id "net.ltgt.apt" version "0.18" // <1>
    id "org.sonarqube" version "2.8"
}

repositories {
    mavenLocal()
    jcenter()
}

version "$projectVersion"
group "com.mikerusoft"

apply plugin: "java"
sourceCompatibility = 1.11
targetCompatibility = 1.11
apply plugin: "io.spring.dependency-management"
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'jacoco'

mainClassName = 'com.mikerusoft.redirect.to.stream.Application'

shadowJar {
    mergeServiceFiles()
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"

    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"

    runtime "io.micronaut:micronaut-core:$micronautVersion"
    runtime "io.micronaut:micronaut-management"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "org.junit.jupiter:junit-jupiter-params"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testCompile "io.micronaut:micronaut-http-client"
    testCompile "io.micronaut:micronaut-http-server-netty"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.awaitility:awaitility:$awaitilityVersion"
    testCompile "org.assertj:assertj-core:$assertJVersion"
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
